import { Injectable } from '@nestjs/common';
import { ApiSM } from 'src/apiSM/apiSM.service';
import {
    accessShopsKeyboard,
    cartItemsOrderKeyboard,
    comebackOrderMenuKeyboard,
    emptyCartKeyboard,
    getSelectCitiesKeyboard,
} from '../common/keyboards/inline.keyboard';
import { prepareListOutput } from 'src/common/utils/transformRespBody';
import { TelegrafException } from 'nestjs-telegraf';
import { KNOWN_ERROR } from 'src/app.constants';
import { UserService } from 'src/users/user.service';
import { checkPhoneNumber, findFavouriteCityName, refactorCitiesAfterGetInBD, refactorShopAddress } from 'src/common/utils/some.utils';
import { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';
import { Markup } from 'telegraf/typings/telegram-types';
import { AccountService } from 'src/accounts/account.service';
import { ShopAddressType } from 'src/common/interfaces/some.interface';

@Injectable()
export class OrderService {
    constructor(private userService: UserService, private accountService: AccountService) {}

    async choosingWayCart(api: ApiSM) {
        const isItemsCart = await api.getListCart();
        if (isItemsCart == null) throw new TelegrafException(KNOWN_ERROR.ERROR_GET_CART.messageTg);

        const itemsCart = api.itemsCart;
        let text: any;
        let keyboard: any;
        if (itemsCart.length != 0) {
            keyboard = cartItemsOrderKeyboard(itemsCart);
            text = prepareListOutput(api.rawItemsCart);
        } else {
            text = `üì± –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω. –ë–∞–ª–∞–Ω—Å: ${api.bonusCount}`;
            keyboard = emptyCartKeyboard;
        }

        return {
            text: text,
            keyboard: keyboard,
        };
    }

    async searchAndAddinputArticle(api: ApiSM, article: string) {
        const searchProduct = await api.searchProduct(article);
        let answer: string;

        if (searchProduct) {
            const productId = searchProduct.id;
            const skus = searchProduct.skus;
            let sku: string;
            for (let sku_in of skus) {
                const code = sku_in.code;
                if (article.toLowerCase() == code.toLowerCase()) {
                    sku = sku_in.id;
                    break;
                }
            }
            const resultAdding = await api.addItemCart(productId, sku);

            if ('cartLite' in resultAdding.data) {
                answer = `${article.toUpperCase()} –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n`;
            } else if ('PRODUCT_IS_NOT_AVAILABLE' in resultAdding) {
                answer = `${article.toUpperCase()} –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n`;
            } else if ('PRODUCT_IS_NOT_ACTIVE' in resultAdding) {
                answer = `${article.toUpperCase()} –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n`;
            } else {
                answer = `${article.toUpperCase()} –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É\n`;
            }
        } else {
            answer = `${article.toUpperCase()} –ù–µ –Ω–∞–π–¥–µ–Ω\n`;
        }
        return answer;
    }

    async getFavouriteCities(telegramId: string) {
        const user = await this.userService.GetUserWithCitys(telegramId);
        const rawFavouriteCities = user.userCities;
        const favouriteCities = refactorCitiesAfterGetInBD(rawFavouriteCities);
        return favouriteCities;
    }

    async findCity(api: ApiSM, city: string, typeCity = 'common') {
        const foundCities = await api.findCity(city);

        let text: string;
        let keyboard: Markup<InlineKeyboardMarkup>;

        if (foundCities.length != 0) {
            text = '–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞';
            keyboard = getSelectCitiesKeyboard(foundCities, typeCity);
        } else {
            text = '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑';
            keyboard = comebackOrderMenuKeyboard;
        }

        return { text, keyboard, cities: foundCities };
    }

    async addFavouriteCity(telegramId: string, addFavouriteCities, favouriteCities, cityId: string) {
        const isFoundCity = favouriteCities.find((city) => city.id === cityId);
        let text: string;

        if (!isFoundCity) {
            const selectedFavouriteCity = findFavouriteCityName(cityId, addFavouriteCities);
            const isCreate = await this.userService.createUserCity(String(telegramId), selectedFavouriteCity);
            text = isCreate ? '–ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–ì–æ—Ä–æ–¥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω';
        } else {
            text = '–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ';
        }

        return text;
    }

    async delFavouriteCity(telegramId: string, cityId: string) {
        const isDel = await this.userService.delUserCity(String(telegramId), cityId);
        return isDel ? '–ì–æ—Ä–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–ì–æ—Ä–æ–¥ –Ω–µ —É–¥–∞–ª–µ–Ω';
    }

    async addItemsLink(api: ApiSM, link: string) {
        const url = new URL(link);
        const specificationId = url.searchParams.get('specificationId');
        const status = await api.applySnapshot(specificationId);
        return status ? '–¢–æ–≤–∞—Ä—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É' : '–¢–æ–≤–∞—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã';
    }

    async clearCart(api: ApiSM) {
        const itemsCart = api.itemsCart;
        const status = await api.removeItemFromCart(itemsCart);
        return status;
    }

    async removeItemFromCart(api: ApiSM, removeitem: { productId: string; sku: string }) {
        const status = await api.removeItemFromCart([
            {
                productId: removeitem.productId,
                sku: removeitem.sku,
            },
        ]);
        return status;
    }

    async choosingShopOrder(api: ApiSM) {
        const pickupAvabilityList = await api.internalPickupAvailability();
        const refPickupAvabilityList: ShopAddressType = refactorShopAddress(pickupAvabilityList);
        const shopKeyboard = accessShopsKeyboard(refPickupAvabilityList);

        return { refPickupAvabilityList, shopKeyboard };
    }

    async orderConfirmation(api: ApiSM, version: string) {
        const orderNumber = await api.submitOrder(version);
        return orderNumber;
        //–¥–æ–¥–µ–ª–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –±–æ–Ω—É—Å–æ–≤
    }

    async inputRecipient(api: ApiSM, dataRecipient: string[]) {
        const [firstName, lastName, email, number, potentialOrder] = dataRecipient;

        if (!firstName.match(/[–∞-—è—ë–ê-–Ø–Å]+/g)) throw new Error("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω–æ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ");

        if (!lastName.match(/[–∞-—è—ë–ê-–Ø–Å]+/g)) throw new Error("–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ");

        if (!email.match(/^[a-zA-Z0-9][\-_\.\+\!\#\$\%\&\'\*\/\=\?\^\`\{\|]{0,1}([a-zA-Z0-9][\-_\.\+\!\#\$\%\&\'\*\/\=\?\^\`\{\|]{0,1})*[a-zA-Z0-9]@[a-zA-Z0-9][-\.]{0,1}([a-zA-Z][-\.]{0,1})*[a-zA-Z0-9]\.[a-zA-Z0-9]{1,}([\.\-]{0,1}[a-zA-Z]){0,}[a-zA-Z0-9]{0,}$/i)) throw new Error("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ example@example.ru");

        const checkNumberPhone = checkPhoneNumber(number)
        if (!!!checkNumberPhone) throw new Error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä! –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥ 88005553535");

        const version = await api.approveRecipientOrder({
            firstName,
            lastName,
            email,
            nationalNumber: checkNumberPhone,
            potentialOrder
        })

        return await this.orderConfirmation(api, version)
    }
}
